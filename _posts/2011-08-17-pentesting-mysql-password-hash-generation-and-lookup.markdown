--- 
layout: post
title: PenTesting - mySQL password hash generation and lookup
tags: 
- mysql
- hashdump
- hashing
- old_passwords
- generator
date: "2011-08-17"
---
One of the worst things you can have in any secure system is a user with a simple password, no matter what steps you take to protect your data, if a privileged user is using a simple password, it's akin to having a safe door that's glass window.

First off we need to take a hash dump:

[cc]
mysql -Bse 'select distinct(password),user from mysql.user;' > hashdump.txt
[/cc]

Now of course you can do the same using SQL Injection etc (WHY when you have SQLi already? duh privilege escalation!) , I'm going to cover this from the perspective that you are the administrator looking to strengthen your security ...

Now you have your hashdump you need a hash table with the equivelent passwords within it, for this you will need 2 things

1. A dictionary file
2. <a href="https://github.com/Oneiroi/PenTesting/blob/master/crypto/generators/mysql/csv_gen.py">https://github.com/Oneiroi/PenTesting/blob/master/crypto/generators/mysql/csv_gen.py</a>

The python script above I wrote to use multiprocessing to map words onto the hash function, and I have had it grind through mySQL hashes at a rate of ~98k per second, there is no "lookup" script at this time though one is currently being written.


[cc]
./csv_gen.py -f /path/to/wordlist.txt -o /output/path/to/output.csv -t <max threads, default 1> [-l optional use legacy hash]
[/cc]

once this has ground through your wordlist you will have a CSV file, which will be in the format <hash>,<password>
the script defaults to the new PASSWORD() function, if you are using old_password=1 in your configuration then pass the -l flag to use legacy hashing instead.

ok let's assume the following fictional scenario 

1. old_passwords is in use, and we want chip's password
2. 077b91e3491e2fdd	chip
3. [cc]
grep 077b91e3491e2fdd output.txt
077b91e3491e2fdd,a
[/cc]
4. Chip has a password that is just he letter "a" which he will tell you is the best password ever ...

And that's about a simple as it gets you generate a set of hashes and you compare known hashes to your generate set to see if you can discern simple passwords, hopefully going on then to chastise the user and instructing them on proper password etiquette, there are more complicated methods of getting the password from the hash, in the case of old_passwords I believe it is possible to reverse the hash to get the original string for one (so don't use old_passwords!)

If you go on to use my python scripts, please let me know how they perform, my test were carried out using an intel i5, I'd love to know how they perform on other CPUs.


